{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/shath/source/repos/Web-Applikasjoner/RHS-Angular/RHS-Angular-master/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'api/user';\n    this.userChanged = new EventEmitter();\n  }\n  register(user) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const registerUrl = `${_this.baseUrl}/register`;\n        const response = yield _this.http.post(registerUrl, user).toPromise();\n        return response;\n      } catch (error) {\n        console.error('Registration failed', error);\n        throw error;\n      }\n    })();\n  }\n  setUser(user) {\n    this.user = user;\n    this.userChanged.emit(this.user);\n  }\n  getUser() {\n    return this.user;\n  }\n  login(credentials) {\n    const loginUrl = `${this.baseUrl}/login`;\n    return this.http.post(loginUrl, credentials).pipe(tap(response => {\n      console.log('Login response:', response);\n      if (response && response.message === 'Login successful' && response.user) {\n        this.setUser(response.user);\n      }\n    }));\n  }\n  logout() {\n    this.user = null;\n    this.userChanged.emit(this.user);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA,SAAqBA,YAAY,QAAQ,eAAe;AAExD,SAAqBC,GAAG,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,YAAO,GAAG,UAAU;IAE5B,gBAAW,GAAG,IAAIJ,YAAY,EAAO;EAEG;EAElCK,QAAQ,CAACC,IAAS;IAAA;IAAA;MACtB,IAAI;QACF,MAAMC,WAAW,GAAG,GAAG,KAAI,CAACC,OAAO,WAAW;QAC9C,MAAMC,QAAQ,SAAS,KAAI,CAACL,IAAI,CAACM,IAAI,CAACH,WAAW,EAAED,IAAI,CAAC,CAACK,SAAS,EAAE;QACpE,OAAOF,QAAQ;OAChB,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C,MAAMA,KAAK;;IACZ;EACH;EAEAE,OAAO,CAACR,IAAS;IACf,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACS,WAAW,CAACC,IAAI,CAAC,IAAI,CAACV,IAAI,CAAC;EAClC;EAEAW,OAAO;IACL,OAAO,IAAI,CAACX,IAAI;EAClB;EAEAY,KAAK,CAACC,WAAgD;IACpD,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACZ,OAAO,QAAQ;IACxC,OAAO,IAAI,CAACJ,IAAI,CAACM,IAAI,CAACU,QAAQ,EAAED,WAAW,CAAC,CACzCE,IAAI,CACHpB,GAAG,CAAEQ,QAAa,IAAI;MACpBI,OAAO,CAACS,GAAG,CAAC,iBAAiB,EAAEb,QAAQ,CAAC;MACxC,IAAIA,QAAQ,IAAIA,QAAQ,CAACc,OAAO,KAAK,kBAAkB,IAAId,QAAQ,CAACH,IAAI,EAAE;QACxE,IAAI,CAACQ,OAAO,CAACL,QAAQ,CAACH,IAAI,CAAC;;IAE/B,CAAC,CAAC,CACH;EACL;EAGAkB,MAAM;IACJ,IAAI,CAAClB,IAAI,GAAG,IAAI;IAChB,IAAI,CAACS,WAAW,CAACC,IAAI,CAAC,IAAI,CAACV,IAAI,CAAC;EAClC;;AA5CWJ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuB,SAAXvB,WAAW;EAAAwB,YAFV;AAAM","names":["EventEmitter","tap","UserService","constructor","http","register","user","registerUrl","baseUrl","response","post","toPromise","error","console","setUser","userChanged","emit","getUser","login","credentials","loginUrl","pipe","log","message","logout","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\shath\\source\\repos\\Web-Applikasjoner\\RHS-Angular\\RHS-Angular-master\\ClientApp\\src\\app\\users\\user.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private baseUrl = 'api/user';\r\n  private user: any; \r\n  userChanged = new EventEmitter<any>();\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  async register(user: any): Promise<any> {\r\n    try {      \r\n      const registerUrl = `${this.baseUrl}/register`;\r\n      const response = await this.http.post(registerUrl, user).toPromise();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Registration failed', error);\r\n      throw error; \r\n    }\r\n  }\r\n\r\n  setUser(user: any): void {\r\n    this.user = user;\r\n    this.userChanged.emit(this.user); \r\n  }\r\n\r\n  getUser(): any {\r\n    return this.user;\r\n  }\r\n\r\n  login(credentials: { Email: string, Password: string }): Observable<any> {\r\n    const loginUrl = `${this.baseUrl}/login`;\r\n    return this.http.post(loginUrl, credentials)\r\n      .pipe(\r\n        tap((response: any) => {\r\n          console.log('Login response:', response);\r\n          if (response && response.message === 'Login successful' && response.user) {\r\n            this.setUser(response.user);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n\r\n  logout(): void {\r\n    this.user = null;\r\n    this.userChanged.emit(this.user);\r\n  } \r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
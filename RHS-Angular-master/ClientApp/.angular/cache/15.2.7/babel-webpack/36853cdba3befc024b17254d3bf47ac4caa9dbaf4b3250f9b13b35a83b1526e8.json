{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/47925/OneDrive - OsloMet/Skrivebord/webapp/RHS-Angular/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { FormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nexport class RegisterComponent {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = 'api/user';\n    this.user = {};\n    this.loading = false;\n  }\n  register() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.user.password = yield _this.hashPassword(_this.user.password);\n      const registerUrl = `${_this.baseUrl}/register`;\n      try {\n        yield _this.http.post(registerUrl, {\n          Name: _this.user.Name,\n          Email: _this.user.Email,\n          Phone: _this.user.Phone,\n          Password: _this.user.password\n        }).toPromise();\n        // Registration successful, navigate to the home page\n        _this.router.navigate(['/home']);\n      } catch (error) {\n        console.error('Registration failed', error);\n      }\n    })();\n  }\n  login(credentials) {\n    const loginUrl = `${this.baseUrl}/login`;\n    return this.http.post(loginUrl, credentials);\n  }\n  hashPassword(password) {\n    return _asyncToGenerator(function* () {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(password);\n      const hashBuffer = yield crypto.subtle.digest('SHA-256', data);\n      const hashArray = Array.from(new Uint8Array(hashBuffer));\n      const hashedPassword = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');\n      return hashedPassword;\n    })();\n  }\n}\nRegisterComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RegisterComponent,\n  factory: RegisterComponent.ɵfac,\n  providedIn: 'root'\n});\nexport class RegisterModule {}\nRegisterModule.ɵfac = function RegisterModule_Factory(t) {\n  return new (t || RegisterModule)();\n};\nRegisterModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: RegisterModule\n});\nRegisterModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  imports: [FormsModule]\n});\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(RegisterModule, {\n    declarations: [RegisterComponent],\n    imports: [FormsModule]\n  });\n})();","map":{"version":3,"mappings":";AAIA,SAASA,WAAW,QAAQ,gBAAgB;;AAS5C,OAAM,MAAOC,iBAAiB;EAK5BC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,SAAI,GAAJD,IAAI;IAAsB,WAAM,GAANC,MAAM;IAJ5C,YAAO,GAAG,UAAU;IAC5B,SAAI,GAAQ,EAAE;IACd,YAAO,GAAG,KAAK;EAEiD;EAE1DC,QAAQ;IAAA;IAAA;MACZ,KAAI,CAACC,IAAI,CAACC,QAAQ,SAAS,KAAI,CAACC,YAAY,CAAC,KAAI,CAACF,IAAI,CAACC,QAAQ,CAAC;MAChE,MAAME,WAAW,GAAG,GAAG,KAAI,CAACC,OAAO,WAAW;MAE9C,IAAI;QACF,MAAM,KAAI,CAACP,IAAI,CAACQ,IAAI,CAACF,WAAW,EAAE;UAChCG,IAAI,EAAE,KAAI,CAACN,IAAI,CAACM,IAAI;UACpBC,KAAK,EAAE,KAAI,CAACP,IAAI,CAACO,KAAK;UACtBC,KAAK,EAAE,KAAI,CAACR,IAAI,CAACQ,KAAK;UACtBC,QAAQ,EAAE,KAAI,CAACT,IAAI,CAACC;SACrB,CAAC,CAACS,SAAS,EAAE;QAEd;QACA,KAAI,CAACZ,MAAM,CAACa,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;OAChC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;;IAC5C;EACH;EAEAE,KAAK,CAACC,WAAgD;IACpD,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACZ,OAAO,QAAQ;IACxC,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAACW,QAAQ,EAAED,WAAW,CAAC;EAC9C;EAEcb,YAAY,CAACD,QAAgB;IAAA;MACzC,MAAMgB,OAAO,GAAG,IAAIC,WAAW,EAAE;MACjC,MAAMC,IAAI,GAAGF,OAAO,CAACG,MAAM,CAACnB,QAAQ,CAAC;MACrC,MAAMoB,UAAU,SAASC,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,SAAS,EAAEL,IAAI,CAAC;MAC9D,MAAMM,SAAS,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,UAAU,CAACP,UAAU,CAAC,CAAC;MACxD,MAAMQ,cAAc,GAAGJ,SAAS,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;MACzF,OAAOL,cAAc;IAAC;EACxB;;AAtCWlC,iBAAiB;SAAjBA,iBAAiB;EAAAwC,SAAjBxC,iBAAiB;EAAAyC,YANhB;AAAM;AAmDpB,OAAM,MAAOC,cAAc;AAAdA,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA;AAAc;AAAdA,cAAc;YAHf3C,WAAW;AAAA;;2EAGV2C,cAAc;IAAAC,eA7Cd3C,iBAAiB;IAAA4C,UA0ClB7C,WAAW;EAAA;AAAA","names":["FormsModule","RegisterComponent","constructor","http","router","register","user","password","hashPassword","registerUrl","baseUrl","post","Name","Email","Phone","Password","toPromise","navigate","error","console","login","credentials","loginUrl","encoder","TextEncoder","data","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashedPassword","map","byte","toString","padStart","join","factory","providedIn","RegisterModule","declarations","imports"],"sourceRoot":"","sources":["C:\\Users\\47925\\OneDrive - OsloMet\\Skrivebord\\webapp\\RHS-Angular\\ClientApp\\src\\app\\users\\register.component.ts"],"sourcesContent":["import { Component, Injectable, NgModule } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html'\r\n})\r\nexport class RegisterComponent {\r\n  private baseUrl = 'api/user';\r\n  user: any = {};\r\n  loading = false;\r\n\r\n  constructor(private http: HttpClient, private router: Router) { }\r\n\r\n  async register(): Promise<void> {\r\n    this.user.password = await this.hashPassword(this.user.password);\r\n    const registerUrl = `${this.baseUrl}/register`;\r\n\r\n    try {\r\n      await this.http.post(registerUrl, {\r\n        Name: this.user.Name,\r\n        Email: this.user.Email,\r\n        Phone: this.user.Phone,\r\n        Password: this.user.password\r\n      }).toPromise();\r\n\r\n      // Registration successful, navigate to the home page\r\n      this.router.navigate(['/home']);\r\n    } catch (error) {\r\n      console.error('Registration failed', error);\r\n    }\r\n  }\r\n\r\n  login(credentials: { email: string, password: string }): Observable<any> {\r\n    const loginUrl = `${this.baseUrl}/login`;\r\n    return this.http.post(loginUrl, credentials);\r\n  }\r\n\r\n  private async hashPassword(password: string): Promise<string> {\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(password);\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    const hashedPassword = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');\r\n    return hashedPassword;\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [FormsModule],\r\n  declarations: [RegisterComponent],\r\n})\r\nexport class RegisterModule { }\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
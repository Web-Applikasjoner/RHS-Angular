{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/47925/OneDrive - OsloMet/Skrivebord/webapp/RHS-Angular-master/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'api/user';\n    this.userChanged = new EventEmitter();\n  }\n  register(user) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        user.password = yield user.password;\n        const registerUrl = `${_this.baseUrl}/register`;\n        const response = yield _this.http.post(registerUrl, user).toPromise();\n        return response;\n      } catch (error) {\n        console.error('Registration failed', error);\n        throw error; // Rethrow the error so that the calling code can handle it\n      }\n    })();\n  }\n\n  setUser(user) {\n    this.user = user;\n    this.userChanged.emit(this.user); // Notify subscribers when user is set\n  }\n\n  getUser() {\n    return this.user;\n  }\n  login(credentials) {\n    const loginUrl = `${this.baseUrl}/login`;\n    return this.http.post(loginUrl, credentials);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA,SAAqBA,YAAY,QAAQ,eAAe;;;AAOxD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,YAAO,GAAG,UAAU;IAE5B,gBAAW,GAAG,IAAIH,YAAY,EAAO;EAEG;EAElCI,QAAQ,CAACC,IAAS;IAAA;IAAA;MACtB,IAAI;QACFA,IAAI,CAACC,QAAQ,SAASD,IAAI,CAACC,QAAQ;QACnC,MAAMC,WAAW,GAAG,GAAG,KAAI,CAACC,OAAO,WAAW;QAC9C,MAAMC,QAAQ,SAAS,KAAI,CAACN,IAAI,CAACO,IAAI,CAACH,WAAW,EAAEF,IAAI,CAAC,CAACM,SAAS,EAAE;QACpE,OAAOF,QAAQ;OAChB,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C,MAAMA,KAAK,CAAC,CAAC;;IACd;EACH;;EAEAE,OAAO,CAACT,IAAS;IACf,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACU,WAAW,CAACC,IAAI,CAAC,IAAI,CAACX,IAAI,CAAC,CAAC,CAAC;EACpC;;EAEAY,OAAO;IACL,OAAO,IAAI,CAACZ,IAAI;EAClB;EAEAa,KAAK,CAACC,WAAgD;IACpD,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACZ,OAAO,QAAQ;IACxC,OAAO,IAAI,CAACL,IAAI,CAACO,IAAI,CAACU,QAAQ,EAAED,WAAW,CAAC;EAC9C;;AA/BWlB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAoB,SAAXpB,WAAW;EAAAqB,YAFV;AAAM","names":["EventEmitter","UserService","constructor","http","register","user","password","registerUrl","baseUrl","response","post","toPromise","error","console","setUser","userChanged","emit","getUser","login","credentials","loginUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\47925\\OneDrive - OsloMet\\Skrivebord\\webapp\\RHS-Angular-master\\ClientApp\\src\\app\\users\\user.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  private baseUrl = 'api/user';\n  private user: any; // Declare the user property\n  userChanged = new EventEmitter<any>();\n\n  constructor(private http: HttpClient) { }\n\n  async register(user: any): Promise<any> {\n    try {\n      user.password = await user.password;\n      const registerUrl = `${this.baseUrl}/register`;\n      const response = await this.http.post(registerUrl, user).toPromise();\n      return response;\n    } catch (error) {\n      console.error('Registration failed', error);\n      throw error; // Rethrow the error so that the calling code can handle it\n    }\n  }\n\n  setUser(user: any): void {\n    this.user = user;\n    this.userChanged.emit(this.user); // Notify subscribers when user is set\n  }\n\n  getUser(): any {\n    return this.user;\n  }\n\n  login(credentials: { email: string, password: string }): Observable<any> {\n    const loginUrl = `${this.baseUrl}/login`;\n    return this.http.post(loginUrl, credentials);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
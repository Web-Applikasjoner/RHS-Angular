{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/47925/OneDrive - OsloMet/Skrivebord/webapp/RHS-Angular/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'api/user';\n  }\n  register(user) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      user.password = yield _this.hashPassword(user.password);\n      const registerUrl = `${_this.baseUrl}/register`;\n      return _this.http.post(registerUrl, user);\n    })();\n  }\n  login(credentials) {\n    const loginUrl = `${this.baseUrl}/login`;\n    return this.http.post(loginUrl, credentials);\n  }\n  hashPassword(password) {\n    return _asyncToGenerator(function* () {\n      const encoder = new TextEncoder();\n      const data = encoder.encode(password);\n      const hashBuffer = yield crypto.subtle.digest('SHA-256', data);\n      const hashArray = Array.from(new Uint8Array(hashBuffer));\n      const hashedPassword = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');\n      return hashedPassword;\n    })();\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,YAAO,GAAG,UAAU;EAEY;EAElCC,QAAQ,CAACC,IAAS;IAAA;IAAA;MACtBA,IAAI,CAACC,QAAQ,SAAS,KAAI,CAACC,YAAY,CAACF,IAAI,CAACC,QAAQ,CAAC;MACtD,MAAME,WAAW,GAAG,GAAG,KAAI,CAACC,OAAO,WAAW;MAC9C,OAAO,KAAI,CAACN,IAAI,CAACO,IAAI,CAACF,WAAW,EAAEH,IAAI,CAAC;IAAC;EAC3C;EAEAM,KAAK,CAACC,WAAgD;IACpD,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACJ,OAAO,QAAQ;IACxC,OAAO,IAAI,CAACN,IAAI,CAACO,IAAI,CAACG,QAAQ,EAAED,WAAW,CAAC;EAC9C;EAEcL,YAAY,CAACD,QAAgB;IAAA;MACzC,MAAMQ,OAAO,GAAG,IAAIC,WAAW,EAAE;MACjC,MAAMC,IAAI,GAAGF,OAAO,CAACG,MAAM,CAACX,QAAQ,CAAC;MACrC,MAAMY,UAAU,SAASC,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,SAAS,EAAEL,IAAI,CAAC;MAC9D,MAAMM,SAAS,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,UAAU,CAACP,UAAU,CAAC,CAAC;MACxD,MAAMQ,cAAc,GAAGJ,SAAS,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;MACzF,OAAOL,cAAc;IAAC;EACxB;;AAvBWzB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA+B,SAAX/B,WAAW;EAAAgC,YAFV;AAAM","names":["UserService","constructor","http","register","user","password","hashPassword","registerUrl","baseUrl","post","login","credentials","loginUrl","encoder","TextEncoder","data","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashedPassword","map","byte","toString","padStart","join","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\47925\\OneDrive - OsloMet\\Skrivebord\\webapp\\RHS-Angular\\ClientApp\\src\\app\\users\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private baseUrl = 'api/user';\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  async register(user: any): Promise<Observable<any>> {\r\n    user.password = await this.hashPassword(user.password);\r\n    const registerUrl = `${this.baseUrl}/register`;\r\n    return this.http.post(registerUrl, user);\r\n  }\r\n\r\n  login(credentials: { email: string, password: string }): Observable<any> {\r\n    const loginUrl = `${this.baseUrl}/login`;\r\n    return this.http.post(loginUrl, credentials);\r\n  }\r\n\r\n  private async hashPassword(password: string): Promise<string> {\r\n    const encoder = new TextEncoder();\r\n    const data = encoder.encode(password);\r\n    const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n    const hashedPassword = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');\r\n    return hashedPassword;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
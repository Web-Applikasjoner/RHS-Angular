{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"./user.service\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_14_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Username is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, LoginComponent_div_14_div_1_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.f.username.errors.required);\n  }\n}\nfunction LoginComponent_div_19_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 14);\n    i0.ɵɵtemplate(1, LoginComponent_div_19_div_1_Template, 2, 0, \"div\", 15);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.f.password.errors.required);\n  }\n}\nfunction LoginComponent_span_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 16);\n  }\n}\nfunction LoginComponent_span_26_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 17);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r3.errorMessage);\n  }\n}\nconst _c0 = function (a0) {\n  return {\n    \"is-invalid\": a0\n  };\n};\nexport class LoginComponent {\n  constructor(formBuilder, route, router, userService) {\n    this.formBuilder = formBuilder;\n    this.route = route;\n    this.router = router;\n    this.userService = userService;\n    this.loading = false;\n    this.submitted = false;\n    this.errorMessage = '';\n    this.form = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n  ngOnInit() {}\n  get f() {\n    return this.form.controls;\n  }\n  onSubmit() {\n    this.submitted = true;\n    if (this.form.invalid) {\n      return;\n    }\n    this.loading = true;\n    this.userService.login({\n      email: this.f.username.value,\n      password: this.f.password.value\n    }).subscribe({\n      next: response => {\n        this.userService.setUser(response.user);\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n        this.router.navigateByUrl(returnUrl);\n      },\n      error: error => {\n        if (error.status === 401) {\n          this.errorMessage = 'Invalid credentials. Please try again.';\n        } else if (error.status === 404) {\n          this.errorMessage = 'User not found. Please register.';\n        } else if (error.status === 403) {\n          this.errorMessage = 'Incorrect password. Please try again.';\n        } else if (error.status === 500) {\n          this.errorMessage = 'Server error. Please try again later.';\n          console.error('Server error:', error);\n        } else {\n          this.errorMessage = 'An unexpected error occurred';\n          console.error('An unexpected error occurred:', error);\n        }\n        this.loading = false;\n      }\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.UserService));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"ng-component\"]],\n  decls: 27,\n  vars: 12,\n  consts: [[\"charset\", \"utf-8\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-body\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [1, \"form-label\"], [\"type\", \"text\", \"formControlName\", \"username\", 1, \"form-control\", 3, \"ngClass\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"password\", 1, \"form-control\", 3, \"ngClass\"], [1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-1\", 4, \"ngIf\"], [\"routerLink\", \"../register\", 1, \"btn\", \"btn-link\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"invalid-feedback\"], [4, \"ngIf\"], [1, \"spinner-border\", \"spinner-border-sm\", \"me-1\"], [1, \"text-danger\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"html\")(1, \"head\");\n      i0.ɵɵelement(2, \"meta\", 0)(3, \"title\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"body\")(5, \"div\", 1)(6, \"h4\", 2);\n      i0.ɵɵtext(7, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"div\", 3)(9, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_9_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(10, \"div\", 5)(11, \"label\", 6);\n      i0.ɵɵtext(12, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 7);\n      i0.ɵɵtemplate(14, LoginComponent_div_14_Template, 2, 1, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 5)(16, \"label\", 6);\n      i0.ɵɵtext(17, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 9);\n      i0.ɵɵtemplate(19, LoginComponent_div_19_Template, 2, 1, \"div\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"div\")(21, \"button\", 10);\n      i0.ɵɵtemplate(22, LoginComponent_span_22_Template, 1, 0, \"span\", 11);\n      i0.ɵɵtext(23, \" Login \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(24, \"a\", 12);\n      i0.ɵɵtext(25, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(26, LoginComponent_span_26_Template, 2, 1, \"span\", 13);\n      i0.ɵɵelementEnd()()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(8, _c0, ctx.submitted && ctx.f.username.errors));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.username.errors);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(10, _c0, ctx.submitted && ctx.f.password.errors));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.submitted && ctx.f.password.errors);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.loading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n    }\n  },\n  dependencies: [i4.NgClass, i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i2.RouterLink],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","LoginComponent","constructor","formBuilder","route","router","userService","form","group","username","required","password","ngOnInit","f","controls","onSubmit","submitted","invalid","loading","login","email","value","subscribe","next","response","setUser","user","returnUrl","snapshot","queryParams","navigateByUrl","error","status","errorMessage","console","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\47925\\OneDrive - OsloMet\\Skrivebord\\webapp\\RHS-Angular\\ClientApp\\src\\app\\users\\login.component.ts","C:\\Users\\47925\\OneDrive - OsloMet\\Skrivebord\\webapp\\RHS-Angular\\ClientApp\\src\\app\\users\\login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { UserService } from './user.service';\r\n\r\n@Component({\r\n  templateUrl: 'login.component.html'\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  form: FormGroup;\r\n  loading = false;\r\n  submitted = false;\r\n  errorMessage = '';\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.form = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n\r\n  get f() {\r\n    return this.form.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    if (this.form.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.loading = true;\r\n\r\n    this.userService.login({\r\n      email: this.f.username.value,\r\n      password: this.f.password.value\r\n    }).subscribe({\r\n      next: (response: any) => {\r\n        this.userService.setUser(response.user);\r\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\r\n        this.router.navigateByUrl(returnUrl);\r\n      },\r\n      error: (error: any) => {\r\n        if (error.status === 401) {\r\n          this.errorMessage = 'Invalid credentials. Please try again.';\r\n        } else if (error.status === 404) {\r\n          this.errorMessage = 'User not found. Please register.';\r\n        } else if (error.status === 403) {\r\n          this.errorMessage = 'Incorrect password. Please try again.';\r\n        } else if (error.status === 500) {\r\n          this.errorMessage = 'Server error. Please try again later.';\r\n          console.error('Server error:', error);\r\n        } else {\r\n          this.errorMessage = 'An unexpected error occurred';\r\n          console.error('An unexpected error occurred:', error);\r\n        }\r\n\r\n        this.loading = false;\r\n      }\r\n    });\r\n  }\r\n}\r\n","<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <meta charset=\"utf-8\" />\r\n  <title></title>\r\n</head>\r\n<body>\r\n  <div class=\"card\">\r\n    <h4 class=\"card-header\">Login</h4>\r\n    <div class=\"card-body\">\r\n      <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Username</label>\r\n          <input type=\"text\" formControlName=\"username\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\r\n          <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.username.errors.required\">Username is required</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Password</label>\r\n          <input type=\"password\" formControlName=\"password\" class=\"form-control\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\r\n          <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\r\n            <div *ngIf=\"f.password.errors.required\">Password is required</div>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <button [disabled]=\"loading\" class=\"btn btn-primary\">\r\n            <span *ngIf=\"loading\" class=\"spinner-border spinner-border-sm me-1\"></span>\r\n            Login\r\n          </button>\r\n          <a routerLink=\"../register\" class=\"btn btn-link\">Register</a>\r\n          <span *ngIf=\"errorMessage\" class=\"text-danger\">{{ errorMessage }}</span>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</body>\r\n</html>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/47925/OneDrive - OsloMet/Skrivebord/webapp/RHS-Angular/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'api/user';\n    this.userChanged = new EventEmitter();\n  }\n  register(user) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        user.password = yield _this.hashPassword(user.password);\n        const registerUrl = `${_this.baseUrl}/register`;\n        const response = yield _this.http.post(registerUrl, user).toPromise();\n        return response;\n      } catch (error) {\n        console.error('Registration failed', error);\n        throw error; // Rethrow the error so that the calling code can handle it\n      }\n    })();\n  }\n\n  setUser(user) {\n    this.user = user;\n    this.userChanged.emit(this.user); // Notify subscribers when user is set\n  }\n\n  getUser() {\n    return this.user;\n  }\n  login(credentials) {\n    const loginUrl = `${this.baseUrl}/login`;\n    return this.http.post(loginUrl, credentials);\n  }\n  hashPassword(password) {\n    return _asyncToGenerator(function* () {\n      try {\n        const encoder = new TextEncoder();\n        const data = encoder.encode(password);\n        const hashBuffer = yield crypto.subtle.digest('SHA-256', data);\n        const hashArray = Array.from(new Uint8Array(hashBuffer));\n        const hashedPassword = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');\n        return hashedPassword;\n      } catch (error) {\n        console.error('Password hashing failed', error);\n        throw error; // Rethrow the error so that the calling code can handle it\n      }\n    })();\n  }\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA,SAAqBA,YAAY,QAAQ,eAAe;;;AAOxD,OAAM,MAAOC,WAAW;EAKtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJhB,YAAO,GAAG,UAAU;IAE5B,gBAAW,GAAG,IAAIH,YAAY,EAAO;EAEG;EAElCI,QAAQ,CAACC,IAAS;IAAA;IAAA;MACtB,IAAI;QACFA,IAAI,CAACC,QAAQ,SAAS,KAAI,CAACC,YAAY,CAACF,IAAI,CAACC,QAAQ,CAAC;QACtD,MAAME,WAAW,GAAG,GAAG,KAAI,CAACC,OAAO,WAAW;QAC9C,MAAMC,QAAQ,SAAS,KAAI,CAACP,IAAI,CAACQ,IAAI,CAACH,WAAW,EAAEH,IAAI,CAAC,CAACO,SAAS,EAAE;QACpE,OAAOF,QAAQ;OAChB,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C,MAAMA,KAAK,CAAC,CAAC;;IACd;EACH;;EAEAE,OAAO,CAACV,IAAS;IACf,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACW,WAAW,CAACC,IAAI,CAAC,IAAI,CAACZ,IAAI,CAAC,CAAC,CAAC;EACpC;;EAEAa,OAAO;IACL,OAAO,IAAI,CAACb,IAAI;EAClB;EAEAc,KAAK,CAACC,WAAgD;IACpD,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACZ,OAAO,QAAQ;IACxC,OAAO,IAAI,CAACN,IAAI,CAACQ,IAAI,CAACU,QAAQ,EAAED,WAAW,CAAC;EAC9C;EAEcb,YAAY,CAACD,QAAgB;IAAA;MACzC,IAAI;QACF,MAAMgB,OAAO,GAAG,IAAIC,WAAW,EAAE;QACjC,MAAMC,IAAI,GAAGF,OAAO,CAACG,MAAM,CAACnB,QAAQ,CAAC;QACrC,MAAMoB,UAAU,SAASC,MAAM,CAACC,MAAM,CAACC,MAAM,CAAC,SAAS,EAAEL,IAAI,CAAC;QAC9D,MAAMM,SAAS,GAAGC,KAAK,CAACC,IAAI,CAAC,IAAIC,UAAU,CAACP,UAAU,CAAC,CAAC;QACxD,MAAMQ,cAAc,GAAGJ,SAAS,CAACK,GAAG,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;QACzF,OAAOL,cAAc;OACtB,CAAC,OAAOrB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QAC/C,MAAMA,KAAK,CAAC,CAAC;;IACd;EACH;;;AA7CWZ,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAuC,SAAXvC,WAAW;EAAAwC,YAFV;AAAM","names":["EventEmitter","UserService","constructor","http","register","user","password","hashPassword","registerUrl","baseUrl","response","post","toPromise","error","console","setUser","userChanged","emit","getUser","login","credentials","loginUrl","encoder","TextEncoder","data","encode","hashBuffer","crypto","subtle","digest","hashArray","Array","from","Uint8Array","hashedPassword","map","byte","toString","padStart","join","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\47925\\OneDrive - OsloMet\\Skrivebord\\webapp\\RHS-Angular\\ClientApp\\src\\app\\users\\user.service.ts"],"sourcesContent":["import { Injectable, EventEmitter } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private baseUrl = 'api/user';\r\n  private user: any; // Declare the user property\r\n  userChanged = new EventEmitter<any>();\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  async register(user: any): Promise<any> {\r\n    try {\r\n      user.password = await this.hashPassword(user.password);\r\n      const registerUrl = `${this.baseUrl}/register`;\r\n      const response = await this.http.post(registerUrl, user).toPromise();\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Registration failed', error);\r\n      throw error; // Rethrow the error so that the calling code can handle it\r\n    }\r\n  }\r\n\r\n  setUser(user: any): void {\r\n    this.user = user;\r\n    this.userChanged.emit(this.user); // Notify subscribers when user is set\r\n  }\r\n\r\n  getUser(): any {\r\n    return this.user;\r\n  }\r\n\r\n  login(credentials: { email: string, password: string }): Observable<any> {\r\n    const loginUrl = `${this.baseUrl}/login`;\r\n    return this.http.post(loginUrl, credentials);\r\n  }\r\n\r\n  private async hashPassword(password: string): Promise<string> {\r\n    try {\r\n      const encoder = new TextEncoder();\r\n      const data = encoder.encode(password);\r\n      const hashBuffer = await crypto.subtle.digest('SHA-256', data);\r\n      const hashArray = Array.from(new Uint8Array(hashBuffer));\r\n      const hashedPassword = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');\r\n      return hashedPassword;\r\n    } catch (error) {\r\n      console.error('Password hashing failed', error);\r\n      throw error; // Rethrow the error so that the calling code can handle it\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}